# @package _global_

# specify here default configuration
# order of defaults determines the order in which configs override each other
defaults:
  - _self_
  - dataset: conll2003.yaml
  - datamodule: default.yaml
  - taskmodule: transformer_token_classification.yaml
  - model: transformer_token_classification.yaml
  - callbacks: default.yaml
  - logger: null # set logger here or use command line (e.g. `python train.py logger=tensorboard`)
  - trainer: default.yaml
  - hydra: default.yaml
  - paths: default.yaml

  # experiment configs allow for version control of specific hyperparameters
  # e.g. best hyperparameters for each combination of model and datamodule
  - experiment: null

  # debugging config (enable through command line, e.g. `python train.py debug=default)
  - debug: null

  # config for hyperparameter optimization
  - hparams_search: null

  # optional local config for machine/user specific settings
  # it's optional since it doesn't need to exist and is excluded from version control
  - optional local: default.yaml

  # debugging config (enable through command line, e.g. `python train.py debug=default)
  - debug: null

# task name, determines output directory path
task_name: "train"

# default name for the experiment, determines output directory path
# (you can overwrite this in experiment configs)
name: "default"

# tags to help you identify your experiments
# (you can overwrite this in experiment configs)
tags: ["mnist"]

# seed for random number generators in pytorch, numpy and python.random
seed: null

# disable python warnings if they annoy you
ignore_warnings: False

# pretty print config at the start of the run using Rich library
print_config: True

# set False to skip model training
train: True
# evaluate on test set, using best model weights achieved during training
# lightning chooses best weights based on the metric specified in checkpoint callback
test: True

# simply provide checkpoint path to resume training
ckpt_path: null

# path to original working directory
# hydra hijacks working directory by changing it to the new log directory
# https://hydra.cc/docs/next/tutorials/basic/running_your_app/working_directory
original_work_dir: ${hydra:runtime.cwd}

# path to folder with data
data_dir: ${original_work_dir}/data/

# push the model and taskmodule to the huggingface model hub when training has finished
push_to_hub: False

# where to save the trained model and taskmodule
save_dir: models/${name}/${now:%Y-%m-%d_%H-%M-%S}
